# Workflow of the Schedulink System

## System Overview
- **Purpose**: Event scheduling and management for educational institutions.
- **User Roles**:
  - Student: View/register events, book resources, view notifications/reports/calendar.
  - Department Head: Add/edit events/resources, manage registrations, approve notifications.
  - Admin: Full access, approve/decline events/resources, upload reports, manage all data.
- **Tech Stack**:
  - Frontend: Next.js with components/modals for UI (e.g., RoleContext.tsx for role management).
  - Backend: Node.js/Express APIs (e.g., /api/events, /api/resources).
  - Database: MySQL (schema in backend/database_schema.sql).
  - Authentication: Frontend-based (local storage/session; no backend auth endpoints).
  - Key Features:
    - Role-based access (client-side routing).
    - CRUD on events, resources, registrations.
    - Notifications for approvals.
    - PDF report uploads/views.
    - Calendar for event visualization.
    - Sidebar navigation (components/Sidebar.tsx).

## Structured Workflows
Each workflow includes:
- **Steps**: Numbered actions.
- **Activity Diagram**: PlantUML syntax (render for visual).
- **SSD**: Mermaid syntax (render for sequence).

### 1. Role Selection and Login
**Steps**:
1. User accesses root (app/page.tsx).
2. View role cards (app/RoleSelectionCard.tsx).
3. Select role (Student/Dept Head/Admin).
4. Redirect to login page:
   - Admin: app/admin/login/page.tsx (username/password form).
   - Student/Dept Head: Integrated in dashboard (inferred).
5. Submit credentials.
6. Validate (client-side/mock).
7. If valid:
   - Store role/session (context/RoleContext.tsx).
   - Redirect to dashboard.
8. If invalid: Show error, retry.
9. Logout (from sidebar): Clear session, redirect to root.

**Activity Diagram (PlantUML)**:
```
@startuml Login Workflow
start
:Access System;
:View Role Selection;
:Select Role;
:Redirect to Login Page;
:Enter Credentials;
:Submit Form;
if (Valid Credentials?) then (yes)
  :Store Session/Role;
  :Redirect to Dashboard;
else (no)
  :Show Error Message;
  :Retry Login;
  stop
endif
:Use System (branch to role workflows);
:Click Logout;
:Clear Session;
:Redirect to Root;
stop
@enduml
```

**SSD (Mermaid)**:
```
sequenceDiagram
    participant User
    participant Frontend
    participant Storage

    User->>Frontend: Select Role & Enter Credentials
    Frontend->>Frontend: Validate Credentials
    alt Valid
        Frontend->>Storage: Set Role/Session
        Storage-->>Frontend: Confirmation
        Frontend-->>User: Redirect to Dashboard
    else Invalid
        Frontend-->>User: Error Message
    end
    User->>Frontend: Logout
    Frontend->>Storage: Clear Session
    Storage-->>Frontend: Cleared
    Frontend-->>User: Redirect to Root
```

### 2. Student Dashboard and Actions
**Steps**:
1. Login as Student -> app/student/dashboard/page.tsx.
2. View sections:
   - Upcoming Events (components/UpcomingEvents.tsx): List events (name, date, desc).
   - Quick Actions (components/QuickActions.tsx): Links to register/book/view calendar.
   - Recent Activity (components/RecentActivity.tsx): User history.
   - KPIs (components/KPICard.tsx): Stats (e.g., registered events).
3. Navigate via Sidebar.tsx to other pages.

**Activity Diagram (PlantUML)**:
```
@startuml Student Dashboard
start
:Login as Student;
:Load Dashboard;
fork
  :View Upcoming Events;
fork again
  :View Quick Actions;
fork again
  :View Recent Activity;
fork again
  :View KPIs;
end fork
:Select Action (e.g., Register Event);
:Navigate to Page (e.g., Registrations);
:Perform Action;
:Return to Dashboard;
stop
@enduml
```

**SSD (Mermaid)**:
```
sequenceDiagram
    participant Student
    participant Dashboard
    participant API

    Student->>Dashboard: Load Dashboard
    Dashboard->>API: GET /api/events (upcoming)
    API-->>Dashboard: Event List
    Dashboard->>API: GET /api/registrations (user)
    API-->>Dashboard: User Data
    Dashboard-->>Student: Render Sections (Events, KPIs, etc.)
    Student->>Dashboard: Click Quick Action (e.g., View Calendar)
    Dashboard-->>Student: Navigate to Calendar Page
```

### 3. View Calendar
**Steps** (All Roles, Filtered by Role):
1. Navigate to app/calendar/page.tsx via sidebar.
2. Load events (GET /api/events).
3. Display in calendar view (e.g., FullCalendar).
4. Click event: View details.
5. If Student: Option to register.
6. Filter by date/role.

**Activity Diagram (PlantUML)**:
```
@startuml View Calendar
start
:Navigate to Calendar;
:Fetch Events (API);
:Render Calendar View;
:Click Event;
:Display Details;
if (Student?) then (yes)
  :Option to Register;
else (no)
  :View Only;
endif
:Navigate Back;
stop
@enduml
```

**SSD (Mermaid)**:
```
sequenceDiagram
    participant User
    participant CalendarPage
    participant API

    User->>CalendarPage: Load Page
    CalendarPage->>API: GET /api/events
    API-->>CalendarPage: Events Data
    CalendarPage-->>User: Render Calendar
    User->>CalendarPage: Click Event
    CalendarPage-->>User: Show Details Modal
```

### 4. Add Event (Department Head)
**Steps**:
1. From dashboard/events page (app/events/page.tsx).
2. Click "Add Event" -> AddEventModal.tsx.
3. Enter: Name, description, start_date, end_date.
4. Validate fields (e.g., dates valid, no conflicts).
5. If invalid: Show errors.
6. Submit: POST /api/events (status: pending).
7. Create notification to Admin (backend/events.js).
8. Confirmation: Success message.
9. Admin approves: PUT /api/notifications/:id/approve -> status 'approved'.

**Activity Diagram (PlantUML)**:
```
@startuml Add Event
start
:Open Add Event Modal;
:Fill Form (Name, Desc, Dates);
:Validate Fields;
if (Valid?) then (yes)
  :Submit POST /api/events;
  :Create Pending Event;
  :Generate Notification to Admin;
  :Show Success;
else (no)
  :Show Error Messages;
  :Refill Form;
endif
:Admin Reviews Notification;
if (Approve?) then (yes)
  :Update Status to Approved;
  :Notify Creator;
else (no)
  :Decline & Notify Reason;
endif
stop
@enduml
```

**SSD (Mermaid)**:
```
sequenceDiagram
    participant DeptHead
    participant Frontend
    participant API
    participant DB
    participant Notif

    DeptHead->>Frontend: Fill & Submit Event Form
    Frontend->>Frontend: Validate Fields
    alt Invalid
        Frontend-->>DeptHead: Error Messages
    else Valid
        Frontend->>API: POST /api/events (pending)
        API->>DB: Insert Event
        DB-->>API: Event ID
        API->>Notif: Create Notification (to Admin)
        Notif->>DB: Insert Notif
        API-->>Frontend: Success
        Frontend-->>DeptHead: Confirmation
    end
    Note over DeptHead,Notif: Later: Admin Approval
    Admin->>API: PUT /api/notifications/:id/approve
    API->>DB: Update Event Status
    DB-->>API: Updated
    API-->>Admin: Approved
```

### 5. Edit Event (Including Name)
**Steps** (Dept Head/Admin):
1. View events (app/events/page.tsx, EventCard.tsx).
2. Click edit on event -> EditEventModal.tsx.
3. Update fields (e.g., name, dates).
4. Validate changes.
5. Submit: PUT /api/events/:id.
6. If pending: May trigger re-approval.
7. Updates propagate (calendar, registrations).
8. Confirmation.

**Activity Diagram (PlantUML)**:
```
@startuml Edit Event
start
:View Events List;
:Select Event to Edit;
:Open Edit Modal;
:Update Fields (e.g., Name);
:Validate Changes;
if (Valid?) then (yes)
  :Submit PUT /api/events/:id;
  :Update in DB;
  :Propagate Changes (Calendar);
  :Show Success;
else (no)
  :Show Errors;
endif
if (Was Pending?) then (yes)
  :Trigger Re-Approval Notification;
endif
stop
@enduml
```

**SSD (Mermaid)**:
```
sequenceDiagram
    participant User
    participant Frontend
    participant API
    participant DB

    User->>Frontend: Select & Edit Event
    Frontend->>Frontend: Validate Updates
    alt Valid
        Frontend->>API: PUT /api/events/:id
        API->>DB: Update Event
        DB-->>API: Updated
        API-->>Frontend: Success
        Frontend-->>User: Confirmation
    else Invalid
        Frontend-->>User: Errors
    end
```

### 6. Register for Event (Student)
**Steps**:
1. Navigate to app/registrations/page.tsx.
2. View events (RegistrationCard.tsx).
3. Click "Register" -> AddRegistrationModal.tsx.
4. Enter: fullName, studentId, year, course, eventId.
5. Submit: POST /api/registrations (status: pending/registered).
6. If approval needed: Notification to Dept Head.
7. View own: Filter by user.
8. Delete: DeleteConfirmationModal.tsx -> DELETE /api/registrations/:id.

**Activity Diagram (PlantUML)**:
```
@startuml Register Event
start
:View Registrations Page;
:Select Event;
:Open Register Modal;
:Fill Details (Name, ID, Year, Course);
:Submit POST /api/registrations;
if (Approval Needed?) then (yes)
  :Create Notification to Approver;
endif
:Show Confirmation;
:View Own Registrations;
if (Delete?) then (yes)
  :Confirm Delete;
  :DELETE /api/registrations/:id;
endif
stop
@enduml
```

**SSD (Mermaid)**:
```
sequenceDiagram
    participant Student
    participant Frontend
    participant API
    participant DB
    participant Notif

    Student->>Frontend: Fill Registration Form
    Frontend->>API: POST /api/registrations
    API->>DB: Insert Registration
    DB-->>API: ID
    alt Approval Needed
        API->>Notif: Create Notification
        Notif->>DB: Insert
    end
    API-->>Frontend: Success
    Frontend-->>Student: Confirmation
```

### 7. Book Resource (Student)
**Steps**:
1. Navigate to app/resources/page.tsx.
2. View resources (ResourceCard.tsx, ResourceKPICard.tsx, ResourceCharts.tsx).
3. Select resource -> Click "Book".
4. POST /api/resources/:id/book (with userId).
5. Creates notification for approval (Dept Head/Admin).
6. View in recent activity.
7. Approval: PUT /api/notifications/:id/approve -> Update status.

**Activity Diagram (PlantUML)**:
```
@startuml Book Resource
start
:View Resources Page;
:Select Resource;
:Click Book;
:Submit POST /api/resources/:id/book;
:Create Booking Entry;
:Generate Notification for Approval;
:Show Pending Confirmation;
:Approver Reviews;
if (Approve?) then (yes)
  :Update Booking Status;
  :Notify Student;
else (no)
  :Decline & Notify;
endif
stop
@enduml
```

**SSD (Mermaid)**:
```
sequenceDiagram
    participant Student
    participant Frontend
    participant API
    participant DB
    participant Notif

    Student->>Frontend: Click Book Resource
    Frontend->>API: POST /api/resources/:id/book
    API->>DB: Insert Booking
    DB-->>API: Success
    API->>Notif: Create Notification
    Notif->>DB: Insert
    API-->>Frontend: Pending Response
    Frontend-->>Student: Confirmation
```

### 8. Manage Notifications (All Roles)
**Steps**:
1. Navigate to app/notifications/page.tsx.
2. Fetch: GET /api/notifications (with joins).
3. View list (NotificationCard.tsx): Events, bookings, approvals.
4. If approver (Dept Head/Admin): Click approve/decline.
5. PUT /api/notifications/:id/approve or /decline.
6. Updates status, notifies parties.

**Activity Diagram (PlantUML)**:
```
@startuml Manage Notifications
start
:Navigate to Notifications;
:Fetch & Display List;
:View Notification Details;
if (Requires Action?) then (yes)
  :Select Approve/Decline;
  :Submit PUT /api/notifications/:id;
  :Update Status in DB;
  :Send Confirmation Notification;
else (no)
  :Mark as Read;
endif
stop
@enduml
```

**SSD (Mermaid)**:
```
sequenceDiagram
    participant User
    participant Frontend
    participant API
    participant DB

    User->>Frontend: Load Notifications
    Frontend->>API: GET /api/notifications
    API->>DB: Query with Joins
    DB-->>API: List
    API-->>Frontend: Notifications
    Frontend-->>User: Render Cards
    User->>Frontend: Approve Notification
    Frontend->>API: PUT /api/notifications/:id/approve
    API->>DB: Update Status
    DB-->>API: Updated
    API-->>Frontend: Success
```

### 9. Upload/View Reports (Admin/Dept Head)
**Steps**:
1. Navigate to app/reports/page.tsx.
2. View list: GET /api/reports (metadata).
3. Download PDFs (from backend/uploads/).
4. Upload (Admin): Select PDF -> POST /api/reports/upload.
5. File stored, metadata added.
6. Students: View only, no upload.

**Activity Diagram (PlantUML)**:
```
@startuml Reports
start
:Navigate to Reports;
:Fetch & View List (GET /api/reports);
:Download PDF;
if (Upload Permission?) then (yes)
  :Select File;
  :Submit POST /api/reports/upload;
  :Store File & Metadata;
  :Show Success;
else (no)
  :View Only;
endif
stop
@enduml
```

**SSD (Mermaid)**:
```
sequenceDiagram
    participant User
    participant Frontend
    participant API
    participant Storage

    User->>Frontend: Load Reports
    Frontend->>API: GET /api/reports
    API-->>Frontend: List
    Frontend-->>User: Render List
    User->>Frontend: Download Report
    Frontend-->>User: Provide PDF Link
    alt Upload (Admin)
        User->>Frontend: Select & Upload PDF
        Frontend->>API: POST /api/reports/upload
        API->>Storage: Save File
        Storage-->>API: Path
        API-->>Frontend: Success
    end
```

### 10. Logout (All Roles)
**Steps**:
1. From any page/sidebar: Click "Logout".
2. Clear session/storage (RoleContext.tsx).
3. Redirect to root (role selection).

**Activity Diagram (PlantUML)**:
```
@startuml Logout
start
:Click Logout Button;
:Clear Session/Storage;
:Redirect to Role Selection;
stop
@enduml
```

**SSD (Mermaid)**:
```
sequenceDiagram
    participant User
    participant Frontend
    participant Storage

    User->>Frontend: Click Logout
    Frontend->>Storage: Clear Role/Session
    Storage-->>Frontend: Cleared
    Frontend-->>User: Redirect to Root
```

## Additional Notes
- **Error Handling**: All forms validate (e.g., required fields, date conflicts); API errors show messages.
- **Data Relations**: Events -> Registrations -> Notifications (cascades on delete).
- **Navigation**: Sidebar.tsx links all pages.
- Render diagrams in tools like PlantUML/Mermaid Live Editor for visuals.
- Based on project files/APIs; no backend auth, so login is frontend-simulated.
